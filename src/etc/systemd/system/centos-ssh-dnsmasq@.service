# -----------------------------------------------------------------------------
# Naming convention:
#
#    centos-ssh-dnsmasq@.service = {service-unit-install-template-name}
#           |
#           +------------ {image-name}
#
#    dnsmasq.pool-1@.service = {service-unit-template-name}
#           Y
#           +------------- {service-unit-name}
#
#    dnsmasq.pool-1@1.1.service = {service-unit-instance-name}
#           Y        Y
#           |        +---- {service-unit-instance}
#           +------------- {service-unit-name}
#
#    dnsmasq.pool-1.1.1 = {service-unit-long-name}
#           Y        Y
#           |        +---- {service-unit-instance}
#           +------------- {service-unit-name}
#
# To install:
#     sudo cat {service-unit-install-template-name} \
#       > /etc/systemd/system/{service-unit-template-name}
#     sudo systemctl daemon-reload
#     sudo systemctl enable -f {service-unit-instance-name}
#
# Start using:
#     sudo systemctl [start|stop|restart|kill|status] {service-unit-instance-name}
#
# Debugging:
#     sudo systemctl status {service-unit-instance-name}
#     journalctl -fn 50 -u {service-unit-instance-name}
#
# To uninstall:
#     sudo systemctl disable -f {service-unit-instance-name}
#     sudo systemctl stop {service-unit-instance-name}
#     sudo rm /etc/systemd/system/{service-unit-template-name}
#     sudo docker rm -f {service-unit-long-name}
# -----------------------------------------------------------------------------

[Unit]
Description=centos-ssh-dnsmasq // %p@%i
Requires=docker.service
After=docker.service

[Service]
Restart=on-failure
RestartSec=8
TimeoutStartSec=1200
Environment="DOCKER_USER=jdeathe"
Environment="DOCKER_CONTAINER_OPTS="
Environment="DOCKER_IMAGE_PACKAGE_PATH=/var/opt/scmi/packages"
Environment="DOCKER_IMAGE_NAME=centos-ssh-dnsmasq"
Environment="DOCKER_IMAGE_TAG=1.0.0"
Environment="DOCKER_PORT_MAP_TCP_53=53"
Environment="DOCKER_PORT_MAP_UDP_53=53"
Environment="DOCKER_PORT_MAP_UDP_67=NULL"
Environment="DNSMASQ_DNSCRYPT_PROXY=false"
Environment="DNSMASQ_RESOLVER_1=8.8.8.8"
Environment="DNSMASQ_RESOLVER_2=8.8.4.4"
Environment="DNSMASQ_CONFIG=/etc/dnsmasq.d/dnsmasq.conf"

# Initialisation: Load image from local storage if available, otherwise pull.
ExecStartPre=/bin/bash -c \
  "if [[ -z $( if [[ -n $(/usr/bin/docker images -q ${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}) ]]; then echo $(/usr/bin/docker images -q ${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}); else echo $(/usr/bin/docker images -q docker.io/${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}); fi; ) ]]; then \
    if [[ -f ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_USER}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz ]]; then \
      /usr/bin/xz -dc ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_USER}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz | /usr/bin/docker load; \
    else \
      /usr/bin/docker pull ${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
    fi; \
  fi"

# Terminate existing container to allow for redeployment
ExecStartPre=-/bin/bash -c \
  "if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\") ]]; then \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\" --filter \"status=paused\") ]]; then \
      /usr/bin/docker unpause %p.%i; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\" --filter \"status=running\") ]]; then \
      /usr/bin/docker stop %p.%i; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\") ]]; then \
      /usr/bin/docker rm -f %p.%i; \
    fi; \
  fi"

# Startup
ExecStart=/bin/bash -c \
  "exec /usr/bin/docker run \
    --name %p.%i \
    --env \"DNSMASQ_DNSCRYPT_PROXY=${DNSMASQ_DNSCRYPT_PROXY}\" \
    --env \"DNSMASQ_RESOLVER_1=${DNSMASQ_RESOLVER_1}\" \
    --env \"DNSMASQ_RESOLVER_2=${DNSMASQ_RESOLVER_2}\" \
    --env \"DNSMASQ_CONFIG=${DNSMASQ_CONFIG}\" \
    $(if [[ ${DOCKER_PORT_MAP_TCP_53} != NULL ]]; then \
      if /usr/bin/grep -qE '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:)?[0-9]*$' <<< \"${DOCKER_PORT_MAP_TCP_53}\"; then \
        printf -- '--publish %%s%%s:53/tcp' \
          $(/usr/bin/grep -o '^[0-9\.]*:' <<< \"${DOCKER_PORT_MAP_TCP_53}\") \
          $(( $(/usr/bin/grep -o '[0-9]*$' <<< \"${DOCKER_PORT_MAP_TCP_53}\") + $(/usr/bin/sed 's~\.[0-9]*$~~' <<< %i) - 1 )); \
      else \
        printf -- '--publish %%s:53/tcp' \
          \"${DOCKER_PORT_MAP_TCP_53}\"; \
      fi; \
    fi) \
    $(if [[ ${DOCKER_PORT_MAP_UDP_53} != NULL ]]; then \
      if /usr/bin/grep -qE '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:)?[0-9]*$' <<< \"${DOCKER_PORT_MAP_UDP_53}\"; then \
        printf -- '--publish %%s%%s:53/udp' \
          $(/usr/bin/grep -o '^[0-9\.]*:' <<< \"${DOCKER_PORT_MAP_UDP_53}\") \
          $(( $(/usr/bin/grep -o '[0-9]*$' <<< \"${DOCKER_PORT_MAP_UDP_53}\") + $(/usr/bin/sed 's~\.[0-9]*$~~' <<< %i) - 1 )); \
      else \
        printf -- '--publish %%s:53/udp' \
          \"${DOCKER_PORT_MAP_UDP_53}\"; \
      fi; \
    fi) \
    $(if [[ ${DOCKER_PORT_MAP_UDP_67} != NULL ]]; then \
      if /usr/bin/grep -qE '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:)?[0-9]*$' <<< \"${DOCKER_PORT_MAP_UDP_67}\"; then \
        printf -- '--publish %%s%%s:67/udp' \
          $(/usr/bin/grep -o '^[0-9\.]*:' <<< \"${DOCKER_PORT_MAP_UDP_67}\") \
          $(( $(/usr/bin/grep -o '[0-9]*$' <<< \"${DOCKER_PORT_MAP_UDP_67}\") + $(/usr/bin/sed 's~\.[0-9]*$~~' <<< %i) - 1 )); \
      else \
        printf -- '--publish %%s:67/udp' \
          \"${DOCKER_PORT_MAP_UDP_67}\"; \
      fi; \
    fi) \
    ${DOCKER_CONTAINER_OPTS} \
    ${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"

ExecStop=/usr/bin/docker stop --time 10 %p.%i

[Install]
DefaultInstance=1.1
WantedBy=multi-user.target
